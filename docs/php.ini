; =========================================================================
; == quicpro_async: php.ini Reference
; =========================================================================
;
; This file serves as a comprehensive reference for all `php.ini`
; directives provided by the `quicpro_async` extension. It is structured
; into two main parts:
;
; 1. Core Framework Configuration: Directives for currently available, stable
;    features of the framework.
; 2. Future Vision & Experimental Features: Directives for features that
;    are on the development roadmap and represent the long-term vision
;    for the platform.
;
; Most of these settings can be overridden on a per-session basis via
; the `Quicpro\Config` object in PHP.
;

[quicpro_async]

; =========================================================================
; == Core Framework Configuration
; =========================================================================


; --------------------------------------------------------------------------
; I. Security Policy & Traffic Management
; --------------------------------------------------------------------------
; Non-cryptographic security features enforced by the C-core.

; The master switch. If set to 0, no `php.ini` settings can be overridden
; by a `Quicpro\Config` object in PHP code.
quicpro.security_allow_config_override = 1

; Master switch to enable or disable the Admin API endpoint for a server.
; For security, this is disabled by default.
quicpro.admin_api_enable = 0

; Globally enables or disables the native, shared-memory based rate limiter.
quicpro.security_rate_limiter_enable = 1

; The default number of requests per second allowed per source IP address.
quicpro.security_rate_limiter_requests_per_sec = 100

; The default burst size (number of requests allowed to exceed the limit).
quicpro.security_rate_limiter_burst = 50

; The global CORS policy. A comma-separated string of allowed origins or '*'.
quicpro.security_cors_allowed_origins = "*"


; --------------------------------------------------------------------------
; II. Cluster & Process Management
; --------------------------------------------------------------------------
; Settings for the C-native `Quicpro\Cluster` supervisor.

; The default number of worker processes to spawn. `0` enables auto-detection,
; matching the number of available CPU cores.
quicpro.cluster_workers = 0

; The "grace period" in milliseconds for workers to shut down cleanly
; after receiving a SIGTERM, before a SIGKILL is sent.
quicpro.cluster_graceful_shutdown_ms = 30000

; Maximum number of open file descriptors (`RLIMIT_NOFILE`) for each worker.
quicpro.server_max_fd_per_worker = 8192

; --- Cluster Resilience & Worker Performance Tuning (Advanced) ---

; Automatically restart worker processes that crash due to fatal errors.
; This is essential for building highly-available, self-healing services.
quicpro.cluster_restart_crashed_workers = 1

; The maximum number of times a single worker will be restarted within the
; `restart_interval_sec`. This prevents rapid-fire crash loops from
; consuming system resources.
quicpro.cluster_max_restarts_per_worker = 10

; The time window in seconds for the `max_restarts` policy.
; e.g., max 10 restarts per worker every 60 seconds.
quicpro.cluster_restart_interval_sec = 60

; Sets the "niceness" value for all worker processes. A lower value (e.g., -10)
; gives the workers a higher CPU priority. This requires appropriate permissions.
quicpro.cluster_worker_niceness = 0

; Sets the OS scheduling policy for worker processes (Linux-specific).
; Provides real-time capabilities for latency-critical workloads like HFT.
; Possible values: "other", "fifo", "rr"
quicpro.cluster_worker_scheduler_policy = "other"

; A mapping of worker IDs to specific CPU cores to pin them to. This provides
; the ultimate control over process placement, avoiding CPU cache misses.
; Example: "0:0-1, 1:2-3, 2:4-5, 3:6-7"
quicpro.cluster_worker_cpu_affinity_map = ""

; The absolute path to a cgroup that the worker processes should be assigned to.
; This allows for fine-grained resource control (CPU, memory limits) via the OS.
quicpro.cluster_worker_cgroup_path = ""

; The UID to switch to for worker processes after they have been forked.
; Used to drop root privileges for enhanced security.
quicpro.cluster_worker_user_id = ""

; The GID to switch to for worker processes after they have been forked.
quicpro.cluster_worker_group_id = ""

; --------------------------------------------------------------------------
; III. TLS & Crypto Security (Complete Configuration)
; --------------------------------------------------------------------------

; --- A. Transport Layer Encryption (TLS 1.3 for QUIC/TCP) ---

; Enables or disables the validation of the peer's TLS certificate against
; a trusted Certificate Authority (CA). Disabling this is insecure and
; should only be done in trusted environments.
quicpro.tls_verify_peer = 1

; The maximum depth for certificate chain verification.
quicpro.tls_verify_depth = 10

; The default absolute path to the CA bundle file (PEM format) used to
; verify peers. If empty, the system's default trust store may be used.
quicpro.tls_default_ca_file = ""

; Path to the PEM-encoded public certificate chain file.
quicpro.tls_default_cert_file = ""

; Path to the PEM-encoded private key corresponding to the public certificate.
quicpro.tls_default_key_file = ""

; (Server-side) Path to the session ticket encryption key file.
; Allows clients to resume sessions across server restarts.
quicpro.tls_ticket_key_file = ""

; A colon-separated list of allowed TLS 1.3 cipher suites in OpenSSL format.
quicpro.tls_ciphers_tls13 = "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256"

; A colon-separated list of allowed elliptic curves for key exchange.
quicpro.tls_curves = "P-256:X25519"

; (Server-side) Defines the lifetime in seconds for TLS 1.3 session tickets.
quicpro.tls_session_ticket_lifetime_sec = 7200

; (Client-side) Enables 0-RTT (Early Data). Reduces latency but can introduce
; replay risks. Requires careful application design.
quicpro.tls_enable_early_data = 0

; (Server-side) Number of recent 0-RTT tokens cached to mitigate replay attacks.
quicpro.tls_server_0rtt_cache_size = 100000

; (Server-side) Enables automatic fetching and stapling of OCSP responses
; to speed up handshakes and improve client privacy.
quicpro.tls_enable_ocsp_stapling = 1


; --- B. Storage Encryption (Encryption at Rest) ---

; Enables automatic, server-side encryption of all objects before writing to disk.
quicpro.storage_encryption_at_rest_enable = 1

; Encryption algorithm used for at-rest data.
quicpro.storage_encryption_algorithm = "aes-256-gcm"

; Path to the master encryption key used for storage encryption.
; In production, this should be managed via KMS or HSM.
quicpro.storage_encryption_key_path = "/etc/quicpro/storage_master_key.bin"


; --- C. Application-Level Encryption (End-to-End Payload Protection) ---

; Enables optional end-to-end encryption for MCP message payloads using a PSK.
quicpro.mcp_payload_encryption_enable = 0

; The name of the environment variable that holds the Pre-Shared Key (PSK).
quicpro.mcp_payload_encryption_psk_env_var = "QUICPRO_MCP_PSK"


; ******************************************************************* ;
; ******************************************************************* ;
; --- D. EXPERT / POTENTIALLY INSECURE OPTIONS (Handle With Care) ---
; ******************************************************************* ;
; ******************************************************************* ;

; (Server-side) Enables the experimental Encrypted Client Hello (ECH) TLS extension.
; Enhances privacy by encrypting SNI and other handshake metadata.
; Requires a valid ECH configuration and DNS support.
quicpro.tls_enable_ech = 0

; Enforces Certificate Transparency (CT) policies for all presented certificates.
; May be required in high-security environments or compliance setups.
quicpro.tls_require_ct_policy = 0

; Disables Server Name Indication (SNI) validation.
; Very rare use case â€“ mostly for advanced proxying or testing.
quicpro.tls_disable_sni_validation = 0

; Completely disables QUIC transport encryption.
; This violates the QUIC spec and must ONLY be used in physically secured,
; trusted environments (e.g., HPC or intra-datacenter AI clusters).
quicpro.transport_disable_encryption = 0

; ******************************************************************* ;
; ******************************************************************* ;

; --------------------------------------------------------------------------
; IV. Kernel, Socket & I/O Engine Tuning ("Bare Metal")
; --------------------------------------------------------------------------
; This section contains expert-level controls for the direct interaction with
; the host operating system's kernel and networking stack. These are the
; most powerful tuning knobs available and are designed for optimizing the
; framework for a specific hardware topology. Misconfiguration here can
; lead to performance degradation or instability.

; --- Low-Level I/O Engine ---

; Enables the use of Linux's `io_uring` interface for all asynchronous I/O.
; For modern kernels, `io_uring` is significantly more performant than `epoll`
; as it reduces the number of required system calls and enables true async
; operations. This is the recommended setting for high-performance Linux servers.
quicpro.io_engine_use_uring = 1

; When using the `io_uring` engine, this value (in milliseconds) enables
; kernel-side polling of the submission queue. A value > 0 instructs a kernel
; thread to spin and look for new I/O requests, reducing latency for
; applications that submit I/O operations at an extremely high rate.
; Default of 0 disables it, relying on interrupts.
quicpro.io_uring_sq_poll_ms = 0

; The maximum number of packets the event loop will attempt to read from a
; socket in a single system call by using `recvmmsg`. Batching system calls
; in this way dramatically reduces CPU overhead under heavy packet load.
quicpro.io_max_batch_read_packets = 64

; The maximum number of packets the event loop will attempt to write to a
; socket in a single system call by using `sendmmsg`.
quicpro.io_max_batch_write_packets = 64


; --- Socket Buffers & Options ---

; The size in bytes of the kernel's receive buffer (SO_RCVBUF) for the
; underlying UDP/TCP sockets. A larger buffer can prevent packet loss due
; to buffer overruns on servers handling a very high rate of incoming data.
quicpro.socket_receive_buffer_size = 2097152

; The size in bytes of the kernel's send buffer (SO_SNDBUF).
quicpro.socket_send_buffer_size = 2097152

; A microsecond value for the `SO_BUSY_POLL` socket option on Linux.
; A value > 0 can reduce latency for incoming packets at the cost of
; higher CPU usage, as the kernel actively polls the device driver queue.
quicpro.socket_enable_busy_poll_us = 0

; Enables `SO_TIMESTAMPING` to receive high-precision hardware or kernel
; timestamps for incoming/outgoing packets. Essential for accurate RTT
; measurement, network diagnostics, and HFT applications.
quicpro.socket_enable_timestamping = 1


; --- CPU & NUMA Affinity ---

; A comma-separated list of CPU core IDs to which the extension's internal
; I/O threads should be pinned. This prevents thread migration between cores
; and improves CPU cache performance. Best used to dedicate specific P-cores
; to networking tasks. Example: "0,2,4,6"
quicpro.io_thread_cpu_affinity = ""

; Sets the NUMA memory policy for I/O threads on multi-socket servers.
; Using "bind" can significantly reduce memory access latency by ensuring
; that a thread's memory is always allocated on the same NUMA node as the
; CPU core it is running on and the network card it is using.
; Possible values: "default", "prefer", "bind", "interleave"
quicpro.io_thread_numa_node_policy = "default"

; --------------------------------------------------------------------------
; V. QUIC Transport Layer
; --------------------------------------------------------------------------
; This section contains expert-level directives for tuning the raw behavior
; of the QUIC protocol itself. These parameters involve deep trade-offs
; between latency, throughput, CPU usage, and protocol overhead. They are
; essential for optimizing performance for specialized workloads like
; High-Frequency Trading (HFT) or distributed Machine Learning.

; --- Congestion Control & Pacing ---

; The default congestion control algorithm. "cubic" is a great all-rounder.
; "bbr" (Bottleneck Bandwidth and Round-trip propagation time) is often
; superior for high-bandwidth connections with some packet loss.
quicpro.transport_cc_algorithm = "cubic"

; The size of the initial congestion window in packets. A higher value can
; speed up the start of a transfer on reliable, high-bandwidth networks
; at the risk of causing initial packet loss if the path capacity is overestimated.
quicpro.transport_cc_initial_cwnd_packets = 32

; The minimum congestion window in packets. The connection will not drop
; below this value.
quicpro.transport_cc_min_cwnd_packets = 4

; Enables Hystart++, an enhancement to TCP's Hystart algorithm adapted for
; QUIC's CUBIC implementation, which helps to exit the slow-start phase
; earlier and more accurately, reducing latency.
quicpro.transport_cc_enable_hystart_plus_plus = 1

; Enables or disables packet pacing. Pacing smooths out sending of packets
; to avoid large bursts that could overwhelm network buffers. Generally
; should be enabled.
quicpro.transport_pacing_enable = 1

; The maximum number of packets that can be sent in a single burst when
; pacing is enabled.
quicpro.transport_pacing_max_burst_packets = 10


; --- Loss Recovery, ACK Management & Timers ---

; The maximum time in milliseconds the transport will delay sending an ACK
; packet. A lower value (e.g., 1-5ms) can enable faster loss recovery at the
; cost of higher network overhead (more ACK packets). Essential for HFT.
quicpro.transport_max_ack_delay_ms = 25

; The ACK Delay exponent advertised to the peer. A value from 0-20.
; See RFC 9002 for details. Expert tuning only.
quicpro.transport_ack_delay_exponent = 3

; The initial timeout in milliseconds for the Probe Timeout (PTO), which
; is used to detect connectivity loss.
quicpro.transport_pto_timeout_ms_initial = 1000

; The maximum timeout in milliseconds for a PTO.
quicpro.transport_pto_timeout_ms_max = 60000

; The maximum number of PTO probes that will be sent before a connection
; is considered lost and permanently closed.
quicpro.transport_max_pto_probes = 5

; The interval in milliseconds for sending keep-alive PING frames on an
; idle connection to prevent NAT and firewall timeouts. Set to 0 to disable.
quicpro.transport_ping_interval_ms = 15000


; --- Flow Control & Stream Limits ---

; The connection-level initial flow control limit in bytes.
quicpro.transport_initial_max_data = 10485760

; Per-stream flow control limit for streams initiated by the local endpoint.
quicpro.transport_initial_max_stream_data_bidi_local = 1048576

; Per-stream flow control limit for streams initiated by the remote peer.
quicpro.transport_initial_max_stream_data_bidi_remote = 1048576

; Per-stream flow control limit for unidirectional streams.
quicpro.transport_initial_max_stream_data_uni = 1048576

; Maximum number of concurrent bidirectional streams the endpoint will allow.
quicpro.transport_initial_max_streams_bidi = 100

; Maximum number of concurrent unidirectional streams the endpoint will allow.
quicpro.transport_initial_max_streams_uni = 100


; --- Protocol Features & Datagrams ---

; The number of active connection IDs the peer is allowed to have.
; A higher number is better for mobility and resilience.
quicpro.transport_active_connection_id_limit = 8

; (Server-side) Enables sending a Retry packet to validate the client's
; source address before committing resources to a new connection.
quicpro.transport_stateless_retry_enable = 0

; Enables or disables QUIC "greasing", a mechanism to send randomized
; values in some fields to prevent network middleboxes from making
-; incorrect assumptions about the protocol, improving long-term robustness.
quicpro.transport_grease_enable = 1

; Enables the QUIC Datagram extension (RFC 9221) for sending unreliable data.
quicpro.transport_datagrams_enable = 1

; The maximum number of incoming datagrams to buffer in memory.
quicpro.transport_dgram_recv_queue_len = 1024

; The maximum number of outgoing datagrams to buffer in memory.
quicpro.transport_dgram_send_queue_len = 1024

; --------------------------------------------------------------------------
; VI. TCP Transport Layer
; --------------------------------------------------------------------------
; Settings for the generic, C-native TCP server and client functionality.
; These options provide expert-level control over the underlying TCP sockets,
; enabling the implementation of any custom TCP-based protocol (e.g., HTTP/1.1,
; Modbus/TCP, raw socket services) with maximum performance and flexibility.

; --- Connection Management ---

; Enables the `Quicpro\TCP` server and client classes.
quicpro.tcp_enable = 1

; The maximum number of concurrent TCP connections a single server process
; will handle.
quicpro.tcp_max_connections = 10240

; The default timeout in milliseconds for establishing an outgoing TCP connection.
quicpro.tcp_connect_timeout_ms = 5000

; Sets the `backlog` argument for the `listen()` syscall on a TCP server socket.
; This defines the maximum queue length for pending, unaccepted connections.
; A higher value is crucial for servers under heavy connection load.
quicpro.tcp_listen_backlog = 511

; Enables the `SO_REUSEPORT` socket option. This is a critical feature for
; multi-process clusters, as it allows multiple workers to bind to and
; accept connections on the *same* TCP port, with the kernel distributing
; incoming connections between them.
quicpro.tcp_reuse_port_enable = 1


; --- Latency & Throughput (Nagle's Algorithm) ---

; Enables the `TCP_NODELAY` socket option, which disables Nagle's algorithm.
; Disabling Nagle's algorithm is critical for low-latency applications (like
; real-time gaming or HFT) that send many small packets, as it sends them
; immediately instead of buffering them to form larger packets.
quicpro.tcp_nodelay_enable = 0

; Enables the `TCP_CORK` socket option (Linux-specific). This is the opposite
; of TCP_NODELAY. It forces the OS to buffer small writes until a sufficiently
; large packet can be sent. This maximizes throughput for streaming protocols
; like HTTP, but increases latency.
; Note: `tcp_nodelay_enable` and `tcp_cork_enable` are mutually exclusive.
quicpro.tcp_cork_enable = 0


; --- Keep-Alive Settings ---

; Enables TCP keep-alives (`SO_KEEPALIVE`) on connections to detect and
; close dead or unresponsive peers.
quicpro.tcp_keepalive_enable = 1

; The time in seconds a connection must be idle before the first keep-alive
; probe is sent (`TCP_KEEPIDLE`).
quicpro.tcp_keepalive_time_sec = 7200

; The interval in seconds between subsequent keep-alive probes if the peer
; does not respond (`TCP_KEEPINTVL`).
quicpro.tcp_keepalive_interval_sec = 75

; The number of unacknowledged probes to send before considering the
; connection dead and closing it (`TCP_KEEPCNT`).
quicpro.tcp_keepalive_probes = 9


; --- TLS over TCP Settings ---

; Sets the minimum allowed TLS version for the TCP server. This allows for
; compatibility with legacy IoT devices that may not support TLS 1.3.
; QUIC, in contrast, strictly requires TLS 1.3.
; Possible values: "TLSv1.2", "TLSv1.3"
quicpro.tcp_tls_min_version_allowed = "TLSv1.2"

; A colon-separated list of allowed cipher suites specifically for TLS 1.2
; connections on the TCP server, in OpenSSL format.
quicpro.tcp_tls_ciphers_tls12 = "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384"

; --------------------------------------------------------------------------
; VII. Application Protocols (HTTP/3, WebSockets, WebTransport)
; --------------------------------------------------------------------------
; This section configures the behavior of the high-level application protocols
; that are built on top of the underlying QUIC and TCP transports. This includes
; settings for HTTP/3, the legacy WebSocket protocol, and its modern,
; QUIC-native successor: WebTransport.

; The successor to WebSockets you're thinking of is **WebTransport**.
; Unlike WebSockets, which are limited to a single, ordered stream, WebTransport
; is built directly on QUIC. This gives it massive advantages: it supports
; multiple parallel streams, unreliable datagrams for real-time gaming, and
; benefits from QUIC's faster connection setup. `quicpro_async` is designed
; to provide a first-class, native server and client for WebTransport,
; making it the recommended choice for new real-time web applications.
;

; --- HTTP/3 General Settings ---

; (Server-side) Enables or disables automatically adding the `Alt-Svc` header
; to HTTP/1.1 or HTTP/2 responses to allow browsers to discover and upgrade
; to the HTTP/3 endpoint.
quicpro.http_advertise_h3_alt_svc = 1

; A comma-separated list of compression algorithms to enable for automatic
; C-level response body compression, in order of preference.
quicpro.http_auto_compress = "brotli,gzip"

; The maximum size in bytes of a compressed and encoded HTTP header block.
; This is a security measure to prevent "header-bomb" denial-of-service attacks.
quicpro.h3_max_header_list_size = 65536

; The maximum capacity in bytes that the QPACK dynamic table can use for
; header compression.
quicpro.h3_qpack_max_table_capacity = 4096

; The maximum number of streams that can be blocked waiting for QPACK
; decoder instructions.
quicpro.h3_qpack_blocked_streams = 100

; (Server-side) Enables or disables the HTTP/3 Server Push feature.
quicpro.h3_server_push_enable = 0

; Enables server-side support for sending 103 Early Hints responses
; to allow clients to start fetching sub-resources before the final
; response is generated.
quicpro.http_enable_early_hints = 1

; --- WebSocket Protocol Settings ---

; The maximum allowed size in bytes for a single WebSocket message payload.
; Messages larger than this will cause the connection to be terminated.
quicpro.websocket_default_max_payload_size = 16777216

; The default interval in milliseconds for the server to send an automatic
; WebSocket PING frame to keep the connection alive through idle NATs and proxies.
; Set to 0 to disable automatic pings.
quicpro.websocket_default_ping_interval_ms = 25000

; The timeout in milliseconds for the WebSocket upgrade handshake (the initial
; HTTP/1.1 -> 101 Switching Protocols sequence).
quicpro.websocket_handshake_timeout_ms = 5000


; --- WebTransport Protocol Settings (Experimental / Future Vision) ---

; Globally enables the `Quicpro\WebTransport\Server` and client classes.
quicpro.webtransport_enable = 1

; The maximum number of concurrent WebTransport sessions a server will handle.
quicpro.webtransport_max_concurrent_sessions = 10000

; The maximum number of concurrent streams (both bidirectional and unidirectional)
; that a single client is allowed to open on a WebTransport session.
quicpro.webtransport_max_streams_per_session = 256

; --------------------------------------------------------------------------
; VIII. MCP & Pipeline Orchestrator
; --------------------------------------------------------------------------
; This section configures the behavior of the framework's core components
; for service-to-service communication (MCP) and for executing complex,
; multi-step workflows (PipelineOrchestrator).

; --- MCP (Model Context Protocol) Settings ---

; The default timeout in milliseconds for a single, synchronous MCP request
; made by a client. Can be overridden on a per-call basis.
quicpro.mcp_default_request_timeout_ms = 30000

; A hard security limit on the maximum size in bytes of a single incoming
; MCP message. This prevents a single malicious or malformed request from
; exhausting memory on the server.
quicpro.mcp_max_message_size_bytes = 4194304 ; 4MB

; Globally enables a default automatic retry policy for idempotent MCP client
; requests that fail due to transient network errors.
quicpro.mcp_default_retry_policy_enable = 1

; The maximum number of retry attempts for a failed MCP call.
quicpro.mcp_default_retry_max_attempts = 3

; The initial backoff delay in milliseconds for the retry mechanism.
; The delay will typically increase exponentially with each attempt.
quicpro.mcp_default_retry_backoff_ms_initial = 100

; Enables a C-level, in-memory LRU cache for idempotent MCP requests.
; If enabled, the result of a request can be served from the cache,
; dramatically improving performance and reducing load on backend agents.
quicpro.mcp_enable_request_caching = 0

; The default Time-To-Live in seconds for items in the MCP request cache.
quicpro.mcp_request_cache_ttl_sec = 60


; --- Pipeline Orchestrator Settings ---

; The default global timeout in milliseconds for the execution of an
; entire pipeline. If a workflow exceeds this time, it will be terminated.
quicpro.orchestrator_default_pipeline_timeout_ms = 120000

; A safeguard to prevent infinite recursion in pipelines that are designed
; to call other pipelines. Sets the maximum nesting depth.
quicpro.orchestrator_max_recursion_depth = 10

; The default number of parallel Fibers the orchestrator will use for
; conceptual looping constructs like 'ForEach'.
quicpro.orchestrator_loop_concurrency_default = 50

; Enables or disables the automatic propagation of OpenTelemetry trace
; context across all MCP calls initiated by the orchestrator.
quicpro.orchestrator_enable_distributed_tracing = 1
; --------------------------------------------------------------------------
; IX. High-Performance I/O & Serialization
; --------------------------------------------------------------------------
; This section contains expert-level directives for tuning the core data
; handling path of the framework. These settings control the performance of
; the IIBIN serialization engine and the mechanisms for moving data between
; PHP userland, the C-core, and the network sockets. Proper tuning here is
; critical for achieving nanosecond-level performance.

; --- IIBIN Serialization Engine ---

; The maximum number of fields allowed when defining a single IIBIN schema.
; This acts as a safeguard against overly complex or malicious schemas.
quicpro.iibin_max_schema_fields = 256

; The maximum recursion depth allowed during the encoding or decoding of
; nested messages. This is a critical security measure to prevent stack
; overflow vulnerabilities caused by self-referential or deeply nested schemas.
quicpro.iibin_max_recursion_depth = 32

; Enables string interning within the IIBIN decoder. When enabled, the C-core
; will cache frequently seen strings (like field names or common enum values)
; and reuse them instead of creating new PHP strings every time. This can
; significantly reduce memory allocation and improve performance in
; message-heavy applications.
quicpro.iibin_string_interning_enable = 1


; --- Zero-Copy I/O via Shared Memory Buffers ---

; Enables an experimental zero-copy data path between PHP and the C-core.
; When enabled, PHP can request a buffer from a shared memory pool managed by
; the extension, write data into it, and pass it to the C-core for sending
; without any intermediate data copies.
quicpro.io_use_shared_memory_buffers = 0

; The default size in kilobytes for a single shared memory buffer when requested
; by the application.
quicpro.io_default_buffer_size_kb = 64

; The total size in megabytes of the shared memory pool from which individual
; I/O buffers are allocated.
quicpro.io_shm_total_memory_mb = 256

; The system name/path for the shared memory segment, to avoid conflicts
; with other applications on the same server.
quicpro.io_shm_path = "/quicpro_io_shm"


; --- Low-Level I/O Engine Tuning ---

; Selects the underlying I/O polling mechanism used by the C-level event loop.
; "auto" will select the best available option for the host OS. Experts can
; force a specific backend for testing or specific workloads.
; Possible values: "auto", "epoll", "kqueue", "io_uring"
quicpro.io_engine_mode = "auto"

; When using the `io_uring` engine on Linux, this value (in milliseconds)
; enables kernel-side polling of the submission queue. A value > 0 keeps a
; kernel thread busy polling for this duration, reducing latency for
; applications that submit I/O requests at an extremely high rate.
quicpro.io_uring_sq_poll_ms = 0

; The maximum number of packets the event loop will attempt to read from a
; socket in a single system call (`recvmmsg`). Batching reads reduces
; the number of syscalls and CPU overhead under heavy load.
quicpro.io_max_batch_read_packets = 64

; The maximum number of packets the event loop will attempt to write to a
; socket in a single system call (`sendmmsg`).
quicpro.io_max_batch_write_packets = 64
; --------------------------------------------------------------------------
; X. State Management
; --------------------------------------------------------------------------
; Configures the default backend for the framework's generic, persistent
; state manager. This component is used by various high-level features
; like the Pipeline Orchestrator (for resumable workflows) and the native
; distributed Rate Limiter (for shared counters).

; Defines where the orchestrator stores its state for long-running or
; resumable pipelines or the rate limiter stores access per IP address
; over a period of time. "memory" is the fastest but not persistent. "sqlite"
; provides simple, file-based persistence with zero setup. "redis" or
; "postgres" should be used for clustered, production environments.
; Possible values: "memory", "sqlite", "redis", "postgres"
quicpro.state_manager_default_backend = "memory"

; The connection URI (for redis/postgres) or absolute file path (for sqlite)
; for the default state backend.
; Example (redis): "tcp://user:pass@host:6379"
; Example (sqlite): "/var/lib/quicpro/global_state.sqlite"
quicpro.state_manager_default_uri = ""


; =========================================================================
; == Future Vision & Experimental Features
; =========================================================================
;
; The following directives control features that are part of the long-term
; vision for the `quicpro_async` ecosystem. They may not be present in the
; current stable release or may be subject to change.
;

; --------------------------------------------------------------------------
; XI. Native Distributed Storage (`quicpro-fs://`)
; --------------------------------------------------------------------------
; Configures the built-in, high-performance, S3-inspired distributed
; object store. This system is designed to provide a native storage
; solution for applications within the quicpro_async ecosystem, eliminating
; the need for external object stores like S3 or MinIO for many use cases.
; It prioritizes performance, redundancy, and tight integration with the
; MCP and DataFrame features.

; --- General & API ---

; Globally enables or disables the `quicpro-fs://` stream wrapper and the
; associated storage agents.
quicpro.storage_enable = 0

; By default, the storage system uses a native, high-performance MCP-based
; API. Enabling this option starts an additional agent that provides a
; translation layer for S3 API compatibility, allowing standard S3 tools
; to interact with the quicpro-fs cluster.
quicpro.storage_s3_api_compat_enable = 0

; Globally enables or disables object versioning for all new storage buckets
; (or top-level directories). When enabled, overwriting or deleting an
; object will create a new version instead of modifying the original.
quicpro.storage_versioning_enable = 1

; A global switch to allow unauthenticated read/write access. This should
; be `0` in any production environment. Access control should be handled by
; a dedicated MCP agent that sits in front of the storage cluster.
quicpro.storage_allow_anonymous_access = 0


; --- Data Placement & Redundancy ---

; The default redundancy mode for new storage pools.
; "erasure_coding": Space-efficient and highly durable. Recommended for large objects.
; "replication": Faster for small reads but uses more raw disk space.
quicpro.storage_default_redundancy_mode = "erasure_coding"

; The default Erasure Coding scheme, defined as "Data_Shards"d"Parity_Shards"p.
; "8d4p" means an object is split into 8 data and 4 parity shards, distributed
; across 12 nodes. The system can survive the failure of any 4 nodes.
quicpro.storage_erasure_coding_shards = "8d4p"

; The default number of complete copies to keep for each object when the
; redundancy mode is set to "replication".
quicpro.storage_default_replication_factor = 3

; The default size in megabytes that large files will be split into before
; being distributed across storage nodes. A key performance tuning parameter.
quicpro.storage_default_chunk_size_mb = 64


; --- Cluster Topology & Discovery ---

; The MCP endpoint URI for the central Metadata Agent, which manages the
; file index and location of all data chunks.
quicpro.storage_metadata_agent_uri = "127.0.0.1:9701"

; The method by which storage nodes discover and join the cluster.
; "static": Only nodes listed in `storage_node_static_list` are used.
; "mcp_heartbeat": Nodes can dynamically register themselves with the Metadata Agent.
quicpro.storage_node_discovery_mode = "static"

; A comma-separated list of storage node MCP URIs, used when discovery mode is "static".
quicpro.storage_node_static_list = "127.0.0.1:9711,127.0.0.1:9712"


; --- Performance & Caching ---

; Enables or disables client-side caching of file and directory metadata to
; reduce lookups to the Metadata Agent for frequently accessed paths.
quicpro.storage_metadata_cache_enable = 1

; The default Time-To-Live in seconds for the client-side metadata cache.
quicpro.storage_metadata_cache_ttl_sec = 60

; Enables the use of Microsoft's DirectStorage API (on supported platforms) for
; ultra-fast, low-CPU data transfers from NVMe drives directly to GPU memory.
; This is a high-performance feature for AI/ML workloads.
quicpro.storage_enable_directstorage = 0

; --------------------------------------------------------------------------
; XII. High-Performance Compute & AI Engine
; --------------------------------------------------------------------------
; This section provides granular control over the framework's native data
; processing (DataFrame) and GPU compute capabilities. These settings allow
; the engine to be finely tuned for specific hardware from NVIDIA (CUDA),
; AMD (ROCm), and Intel (SYCL/oneAPI), turning PHP into a legitimate
; platform for high-performance computing and AI workloads.

; --- DataFrame Engine (CPU-based Analytics) ---

; Enables the native `Quicpro\DataFrame` class and its associated C-level
; functions for high-performance, in-memory data manipulation.
quicpro.dataframe_enable = 1

; A default memory limit in megabytes for a single DataFrame object to prevent
; accidental exhaustion of system memory during large data operations.
quicpro.dataframe_memory_limit_mb = 1024

; Enables string interning for string columns within DataFrames. This reduces
; memory usage significantly when working with categorical data by storing
; each unique string only once.
quicpro.dataframe_string_interning_enable = 1

; The number of CPU threads the DataFrame engine will use by default for
; parallelizable operations (e.g., map, filter). `0` means auto-detect
; and use all available cores.
quicpro.dataframe_cpu_parallelism_default = 0


; --- General GPU Configuration ---

; Master switch to enable direct integration with GPU hardware for AI and
; compute tasks. Requires appropriate drivers and libraries (CUDA, ROCm) to be installed.
quicpro.gpu_bindings_enable = 0

; Selects the GPU compute backend. "auto" will detect the first available
; hardware. Can be explicitly set to target a specific vendor's stack.
; Possible values: "auto", "cuda", "rocm", "sycl"
quicpro.gpu_default_backend = "auto"

; A mapping of `quicpro_async` worker IDs to specific GPU device IDs.
; This is critical for managing resources in a multi-GPU environment, ensuring
; workloads are pinned to specific cards.
; Example: "0:0, 1:0, 2:1, 3:1" (pins workers 0,1 to GPU 0; 2,3 to GPU 1)
quicpro.worker_gpu_affinity_map = ""

; The size in megabytes of a memory pool to pre-allocate on each GPU upon
; startup. This reduces the latency of memory allocation during runtime.
quicpro.gpu_memory_preallocation_mb = 2048

; Enables Peer-to-Peer (P2P) communication between GPUs on the same machine
; over high-speed interconnects like NVIDIA's NVLink or AMD's Infinity Fabric.
; This allows for direct memory transfers between GPUs without involving the CPU.
quicpro.gpu_p2p_enable = 1

; Enables the use of Microsoft's DirectStorage API (on supported platforms) for
; ultra-fast, low-CPU data transfers from NVMe drives directly to GPU memory.
quicpro.storage_enable_directstorage = 1


; --- NVIDIA CUDA Specific Settings ---

; A boolean to specifically enable or disable the use of Tensor Cores for
; mixed-precision (FP16/BF16) training and inference, which can provide a
; massive speedup on supported NVIDIA GPUs (Volta architecture and newer).
quicpro.cuda_enable_tensor_cores = 1

; The number of CUDA streams to create per device. Using multiple streams
; allows for concurrent execution of data transfers and kernel computations,
; hiding latency and maximizing GPU utilization.
quicpro.cuda_stream_pool_size = 4


; --- AMD ROCm Specific Settings ---

; A boolean to enable specific optimizations for AMD's CDNA/RDNA GPU
; architectures, utilizing their matrix cores for accelerated AI workloads.
quicpro.rocm_enable_gfx_optimizations = 1


; --- Intel Arc (SYCL) Specific Settings ---

; A boolean to enable specific optimizations for Intel's XMX (Xe Matrix
; eXtensions) cores, which are analogous to NVIDIA's Tensor Cores.
quicpro.arc_enable_xmx_optimizations = 1

; Enables hardware-accelerated video transcoding using Intel Quick Sync Video (QSV)
; on Arc GPUs, offloading H.264, HEVC, and AV1 encoding/decoding from the CPU.
quicpro.arc_video_acceleration_enable = 1

; --------------------------------------------------------------------------
; XIII. Cloud Autoscaling
; --------------------------------------------------------------------------
; Configures the native ability of the `Quicpro\Cluster` supervisor to
; dynamically manage its own infrastructure. When enabled, the master
; supervisor process can make API calls to a configured cloud provider to
; provision new server nodes during high load and de-provision them
; during idle periods. This transforms a `quicpro_async` application into
; a truly elastic, self-managing system.

; --- Provider & Credentials ---

; The cloud provider to use for dynamic node scaling.
; The C-core would have native clients for supported providers.
; Possible values: "", "aws", "gcp", "hetzner"
quicpro.cluster_autoscale_provider = ""

; The cloud region where new server nodes should be provisioned.
; Example: "eu-central-1" for AWS, "fsn1" for Hetzner
quicpro.cluster_autoscale_region = ""

; The absolute path to a credentials file for authenticating with the
; cloud provider's API (e.g., an IAM role file or a JSON service account key).
quicpro.cluster_autoscale_credentials_path = ""


; --- Scaling Triggers & Policy ---

; The minimum number of active worker nodes in the cluster.
quicpro.cluster_autoscale_min_nodes = 1

; The maximum number of worker nodes the cluster is allowed to scale up to.
quicpro.cluster_autoscale_max_nodes = 1

; The average CPU load percentage across the cluster that, when exceeded,
; will trigger a scale-up event.
quicpro.cluster_autoscale_scale_up_cpu_threshold_percent = 80

; The average CPU load percentage below which the cluster is considered
; under-utilized, triggering a scale-down event.
quicpro.cluster_autoscale_scale_down_cpu_threshold_percent = 20

; The policy for scaling up. Defines how many nodes are added per event.
; Example: "add_nodes:1" or "add_percent:10"
quicpro.cluster_autoscale_scale_up_policy = "add_nodes:1"

; A "cooldown" period in seconds after any scaling event (up or down).
; No further scaling actions will be taken during this period to allow
; the cluster to stabilize and prevent flapping.
quicpro.cluster_autoscale_cooldown_period_sec = 300

; The duration in seconds that a node must be below the scale-down CPU
; threshold before it is considered truly idle and marked for termination.
quicpro.cluster_autoscale_idle_node_timeout_sec = 600


; --- Node Provisioning ---

; The instance type or server size to provision for new nodes.
; Example (AWS): "c5.large", Example (Hetzner): "cpx31"
quicpro.cluster_autoscale_instance_type = ""

; The ID of the machine image (e.g., AWS AMI) to use for new nodes.
; This image should have the OS, PHP, and the `quicpro_async` application
; code pre-installed for fast startup times.
quicpro.cluster_autoscale_instance_image_id = ""

; A JSON string or path to a JSON file defining the network configuration
; for new nodes (e.g., VPC, subnet, security groups).
quicpro.cluster_autoscale_network_config = ""

; A comma-separated list of tags to apply to newly created cloud instances
; for billing and identification purposes.
; Example: "project:quicpro,service:live-map-hub"
quicpro.cluster_autoscale_instance_tags = ""

; --------------------------------------------------------------------------
; XIV. Observability & Distributed Tracing (OpenTelemetry)
; --------------------------------------------------------------------------
; This section configures the native, C-level OpenTelemetry (OTel) integration.
; When enabled, the framework automatically instruments all MCP calls and
; server requests to generate and propagate distributed traces, metrics, and
; logs. This provides deep, out-of-the-box observability for your entire
; microservices architecture with minimal developer effort.

; --- General & Exporter Settings ---

; Master switch to enable or disable all OpenTelemetry functionality.
quicpro.otel_enable = 1

; The logical name of this service. This name will appear in all traces,
; metrics, and logs, allowing you to filter and aggregate data.
; Example: "ingestion-gateway", "live-map-hub"
quicpro.otel_service_name = "quicpro_application"

; The target endpoint for the OTel exporter (usually an OTel Collector).
; This must be a full URL.
; Example (gRPC): "http://otel-collector:4317"
; Example (HTTP): "http://otel-collector:4318/v1/traces"
quicpro.otel_exporter_endpoint = "http://localhost:4317"

; The protocol to use for exporting telemetry data.
; Possible values: "grpc", "http/protobuf"
quicpro.otel_exporter_protocol = "grpc"

; The maximum timeout in milliseconds for a single export request to the collector.
quicpro.otel_exporter_timeout_ms = 10000

; A comma-separated list of key=value pairs to add as headers to all
; outgoing exporter requests (e.g., for authentication with the collector).
; Example: "api-key=my-secret,x-tenant-id=prod"
quicpro.otel_exporter_headers = ""


; --- Batch Processor Settings ---

; The maximum number of telemetry items (spans, metrics, logs) to hold in
; the in-memory queue. If the queue is full, new items will be dropped.
quicpro.otel_batch_processor_max_queue_size = 2048

; The maximum delay in milliseconds to wait before sending a batch, even
; if it hasn't reached its maximum size.
quicpro.otel_batch_processor_schedule_delay_ms = 5000


; --- Tracing Settings ---

; The sampler to use for traces.
; "probability": Samples a fraction of traces based on the ratio below.
; "always_on": Samples every single trace (useful for development).
; "always_off": Disables tracing completely.
; "parent_based": Respects the sampling decision of the upstream service.
quicpro.otel_traces_sampler_type = "parent_based_probability"

; When using the probability sampler, this float value (0.0 to 1.0)
; determines the percentage of requests to trace. `1.0` means 100%.
quicpro.otel_traces_sampler_ratio = 1.0

; A hard limit on the number of attributes that can be attached to a single
; span. This prevents excessive memory usage and oversized trace payloads.
quicpro.otel_traces_max_attributes_per_span = 128


; --- Metrics Settings ---

; A separate switch to enable or disable the export of OTel metrics.
quicpro.otel_metrics_enable = 1

; The interval in milliseconds at which metric data is collected and exported.
quicpro.otel_metrics_export_interval_ms = 60000

; A comma-separated string defining the default boundaries for histogram metrics.
quicpro.otel_metrics_default_histogram_boundaries = "0,5,10,25,50,75,100,250,500,1000"


; --- Logging Settings (Experimental) ---

; Enables the native OTel logging handler, which can capture PHP errors
; and log messages and export them as part of the OTel data stream.
quicpro.otel_logs_enable = 0

; The maximum number of log records to buffer before sending them as a batch.
quicpro.otel_logs_exporter_batch_size = 512

; --------------------------------------------------------------------------
; XV. Native CDN Edge Server
; --------------------------------------------------------------------------
; Configures the server to act as a high-performance, caching reverse proxy,
; or a Content Delivery Network (CDN) Edge Node. When enabled, the server
; can serve content from a local cache (in-memory or on-disk) and fetch
; missing content from a configured upstream "origin". This allows PHP to
; run directly at the edge of a network, close to users.

; --- General ---

; Master switch to enable or disable the CDN mode for a server instance.
quicpro.cdn_enable = 0

; --- Caching Policy & Behavior ---

; The caching strategy to use. "memory" uses a fast, in-memory LRU cache.
; "disk" uses the filesystem, which is slower but can hold much more data.
; "hybrid" would use memory for hot objects and disk for others.
; Possible values: "memory", "disk", "hybrid"
quicpro.cdn_cache_mode = "disk"

; The maximum size in megabytes for the in-memory LRU cache if enabled.
quicpro.cdn_cache_memory_limit_mb = 512

; The absolute filesystem path for the on-disk cache if enabled.
; This path must be writable by the PHP process.
quicpro.cdn_cache_disk_path = "/var/cache/quicpro_cdn"

; The default Time-To-Live (TTL) in seconds for objects in the cache.
; This is used if the origin server does not provide its own caching headers.
quicpro.cdn_cache_default_ttl_sec = 86400

; The maximum size in megabytes of a single object that will be stored
; in the cache. This prevents a single massive file from evicting thousands
; of smaller, more frequently accessed objects.
quicpro.cdn_cache_max_object_size_mb = 1024

; If enabled, the CDN will respect `Cache-Control` and `Expires` headers
; from the origin server, overriding the default TTL.
quicpro.cdn_cache_respect_origin_headers = 1

; A comma-separated list of HTTP request headers to use when creating a
; cache key. This allows you to store different versions of the same resource.
; Example: "Accept-Encoding,Accept-Language"
quicpro.cdn_cache_vary_on_headers = "Accept-Encoding"


; --- Origin (Backend) Configuration ---

; The MCP endpoint URI of the native `quicpro-fs://` object store,
; which acts as the primary origin for content.
quicpro.cdn_origin_mcp_endpoint = ""

; As an alternative to the native store, you can specify a standard HTTP/S
; endpoint as the origin. The CDN will act as a traditional reverse proxy.
; Example: "https://my-backend-storage.com"
quicpro.cdn_origin_http_endpoint = ""

; The timeout in milliseconds for fetching content from the origin server.
quicpro.cdn_origin_request_timeout_ms = 15000


; --- Client-Facing Behavior ---

; If enabled, the CDN will serve a stale (expired) version of an object
; from its cache if the origin server is down or returns an error.
; This significantly improves availability.
quicpro.cdn_serve_stale_on_error = 1

; A comma-separated list of custom headers to add to all responses served
; to the client, in key:value format.
; Example: "X-Served-By: quicpro-cdn-edge,X-My-Header:SomeValue"
quicpro.cdn_response_headers_to_add = "X-Cache-Status: HIT"

; The list of HTTP methods that are considered cacheable.
quicpro.cdn_allowed_http_methods = "GET,HEAD"

; --------------------------------------------------------------------------
; XVI. Smart DNS Server
; --------------------------------------------------------------------------
; Configures the framework to run as a high-performance, fully-featured
; DNS server. This allows `quicpro_async` to handle not just application
; traffic, but also the fundamental name resolution that underpins it.
; Its capabilities range from acting as a standard authoritative server to a
; next-generation, real-time service discovery endpoint.

; --- General Server Settings ---

; Master switch to enable or disable the DNS server functionality.
quicpro.dns_server_enable = 0

; The IP address the DNS server should bind to. "0.0.0.0" listens on all
; IPv4 interfaces.
quicpro.dns_server_bind_host = "0.0.0.0"

; The UDP port for the DNS server to listen on. Port 53 is the standard for
; DNS, but running on it requires privileged access.
quicpro.dns_server_port = 53

; Enables listening for DNS queries over TCP in addition to UDP. This is part
; of the DNS standard and is required for responses larger than 512 bytes.
quicpro.dns_server_enable_tcp = 1

; The default TTL (Time-To-Live) in seconds for the DNS records returned
; by this server. This value tells downstream resolvers how long to cache
; the response.
quicpro.dns_default_record_ttl_sec = 60


; --- Operational Mode ---

; Defines the operational mode of the DNS server.
; "authoritative": Acts as a standard DNS server, serving records from a zone file.
; "recursive_resolver": Acts as a DNS resolver, forwarding queries to upstream servers.
; "service_discovery": The "smart" mode. It resolves queries by making
;   real-time MCP calls to a Cluster Health Agent.
quicpro.dns_mode = "service_discovery"

; The path to the BIND-style zone file to be served when `dns_mode` is
; set to "authoritative".
quicpro.dns_static_zone_file_path = "/etc/quicpro/dns/zones.db"

; A comma-separated list of upstream DNS resolver IP addresses to forward
; queries to when `dns_mode` is set to "recursive_resolver".
; Example: "8.8.8.8,1.1.1.1"
quicpro.dns_recursive_forwarders = ""


; --- Service Discovery Mode Settings ---

; The MCP endpoint URI of the `Cluster Health Agent`. When a DNS query is
; received in "service_discovery" mode, the server will make an MCP call to
; this agent to get a list of healthy IP addresses for the requested service.
quicpro.dns_health_agent_mcp_endpoint = "127.0.0.1:9998"

; The maximum number of IP addresses to return in a single DNS response
; when in service discovery mode.
quicpro.dns_service_discovery_max_ips_per_response = 8


; --- Security & EDNS ---

; Enables DNSSEC validation for all outgoing queries when the server is
; acting as a recursive resolver.
quicpro.dns_enable_dnssec_validation = 1

; The advertised UDP payload size for EDNS (Extension Mechanisms for DNS),
; which allows for larger DNS responses.
quicpro.dns_edns_udp_payload_size = 1232


; --- Semantic DNS & Mothernode (Future Vision) ---

; Enables the experimental Semantic DNS mode. In this mode, the server can
; answer queries based on semantic lookups within a connected knowledge graph.
quicpro.dns_semantic_mode_enable = 0

; The URI of the central "Mothernode" server. The local DNS server will
; periodically send an anonymized summary of its local knowledge graph
; to this node for large-scale, cross-cluster analysis and similarity discovery.
quicpro.dns_mothernode_uri = ""

; The interval in seconds at which the server synchronizes with the Mothernode.
quicpro.dns_mothernode_sync_interval_sec = 86400

; --------------------------------------------------------------------------
; XVIII. SSH over QUIC Gateway (Moduleâ€‘specific excerpt)
; --------------------------------------------------------------------------
; These directives belong to the SSHâ€‘overâ€‘QUIC gateway module. Copy the block
; into your php.ini (or a dedicated conf.d/ file) and adjust as needed.
;
; NOTE: All settings can be overridden at runtime â€“ provided
;       quicpro.security_allow_config_override = 1
;
; --------------------------------------------------------------------------

; --- Gateway Listener Configuration -------------------------------------
quicpro.ssh_gateway_enable               = 0
quicpro.ssh_gateway_listen_host          = "0.0.0.0"
quicpro.ssh_gateway_listen_port          = 2222

; --- Default Upstream Target -------------------------------------------
quicpro.ssh_gateway_default_target_host  = "127.0.0.1"
quicpro.ssh_gateway_default_target_port  = 22
quicpro.ssh_gateway_target_connect_timeout_ms = 5000

; --- Authentication & Target Mapping -----------------------------------
quicpro.ssh_gateway_auth_mode            = "mtls"          ; mtls | mcp_token
quicpro.ssh_gateway_mcp_auth_agent_uri   = ""
quicpro.ssh_gateway_target_mapping_mode  = "static"        ; static | user_profile
quicpro.ssh_gateway_user_profile_agent_uri = ""

; --- Session Control & Logging -----------------------------------------
quicpro.ssh_gateway_idle_timeout_sec     = 1800
quicpro.ssh_gateway_log_session_activity = 1


; --- Authentication & Target Mapping ---

; Defines how the gateway authenticates the incoming QUIC client.
; "mtls": Requires a valid client certificate from the internal CA. Most secure.
; "mcp_token": Requires the client to present a valid JWT from the Auth Agent.
quicpro.ssh_gateway_auth_mode = "mtls"

; The MCP endpoint of the `Auth Agent` to validate tokens against if
; `ssh_gateway_auth_mode` is set to "mcp_token".
quicpro.ssh_gateway_mcp_auth_agent_uri = ""

; Defines how the gateway determines the target SSH server for an authenticated user.
; "static": Always use the `default_target` defined above.
; "user_profile": Makes an MCP call to a user profile service to look up a
;   specific target host for that user, enabling per-user or per-group backends.
quicpro.ssh_gateway_target_mapping_mode = "static"

; The MCP endpoint of the user profile service to query when the target mapping
; mode is set to "user_profile".
quicpro.ssh_gateway_user_profile_agent_uri = ""


; --- Session Control & Logging ---

; An idle timeout in seconds for the entire proxied session. If no data is
; transferred in either direction for this duration, the connection is terminated.
; Set to 0 to disable.
quicpro.ssh_gateway_idle_timeout_sec = 1800

; Enables detailed logging of session events (connect, disconnect, target mapping)
; for security auditing purposes.
quicpro.ssh_gateway_log_session_activity = 1

; --------------------------------------------------------------------------
; XIX. L7 QUIC Router / Load Balancer Mode
; --------------------------------------------------------------------------
; This section configures a `quicpro_async` server to run in a highly
; specialized, high-performance "router" mode. When enabled, the server
; becomes a stateless L7 load balancer that forwards QUIC packets based on
; their Connection ID without terminating TLS.
;
; It uses the general `cluster_*`, `server_*`, and `security_*` directives
; to configure its basic process and network settings. The directives below
; control only the unique routing and backend discovery logic.

; --- Router Mode Activation ---

; The master switch. Set to 1 to enable the stateless QUIC router mode
; for a server instance.
quicpro.router_mode_enable = 0


; --- Backend Routing & Discovery ---

; The algorithm used to map a QUIC Connection ID to a specific backend server.
; "consistent_hash": Recommended for production. Ensures that when the list of
;   backend servers changes, only a minimum number of connections are re-routed.
; "round_robin": Simple round-robin distribution for testing.
quicpro.router_hashing_algorithm = "consistent_hash"

; A secret, random string used as a salt for the consistent hashing algorithm.
; This prevents clients from being able to predict or influence which backend
; server they will be routed to. This should be treated like a password.
quicpro.router_connection_id_entropy_salt = "change-this-to-a-long-random-string-in-production"

; The method by which the router discovers its list of available backend servers.
; "static": The list is read once from the `router_backend_static_list` directive.
; "mcp": The router periodically queries the `Cluster Health Agent` to get a
;   live list of healthy backend nodes. Recommended for production.
quicpro.router_backend_discovery_mode = "static"

; A comma-separated list of backend application server URIs (host:port),
; used when the discovery mode is "static".
quicpro.router_backend_static_list = "127.0.0.1:8443,127.0.0.1:8444"

; The MCP endpoint of the `Cluster Health Agent` to query for a live list of
; backend servers when discovery mode is "mcp".
quicpro.router_backend_mcp_endpoint = "127.0.0.1:9998"

; The interval in seconds at which the router will poll the MCP health agent
; for an updated list of backend servers.
quicpro.router_backend_mcp_poll_interval_sec = 10


; --- Performance & Security ---

; A hard limit on the number of packets per second (PPS) that a single router
; process will forward. This acts as a crucial defense against UDP flood attacks.
quicpro.router_max_forwarding_pps = 1000000

; --------------------------------------------------------------------------
; XX. Smart Contracts & Decentralized Brokerage
; --------------------------------------------------------------------------
; This section configures the framework's native ability to interact with
; blockchain networks and smart contracts. This is a highly advanced feature
; designed to enable use cases such as decentralized resource brokerage
; (e.g., automatically executing a payment when a compute job is finished),
; creating immutable audit trails, or managing digital assets.

; --- General & Registry ---

; Master switch to enable the C-level smart contract integration.
; When enabled, it provides PHP applications with high-level functions
; to read from and write to smart contracts.
quicpro.smartcontract_enable = 0

; The URI of a central or decentralized service registry where other nodes
; can publish the smart contracts they offer. This is used for service
; discovery in the decentralized brokerage model.
quicpro.smartcontract_registry_uri = "https://contracts.quicpro.internal"


; --- Blockchain/DLT Connectivity ---

; The default Distributed Ledger Technology (DLT) or blockchain to interact with.
; The C-core would have native clients for different chain types.
; Possible values: "ethereum", "solana", "fabric"
quicpro.smartcontract_dlt_provider = "ethereum"

; The JSON-RPC endpoint of a blockchain node to send transactions through.
; This can be a self-hosted node or a third-party service like Infura/Alchemy.
; Example: "https://mainnet.infura.io/v3/YOUR_API_KEY"
quicpro.smartcontract_dlt_rpc_endpoint = ""

; The Chain ID of the target network. This is critical to prevent replay
; attacks across different chains.
; Example: 1 for Ethereum Mainnet, 11155111 for Sepolia Testnet.
quicpro.smartcontract_chain_id = 1

; A default gas limit for all transactions sent by the framework. This acts
; as a crucial safeguard to prevent runaway transactions from consuming an
; excessive amount of funds.
quicpro.smartcontract_default_gas_limit = 300000

; The default gas price in Gwei to use for transactions.
quicpro.smartcontract_default_gas_price_gwei = 20


; --- Wallet & Key Management ---

; The default path to an encrypted, JSON-based wallet keystore file (e.g., Geth/UTC format)
; that holds the private key used for signing transactions.
quicpro.smartcontract_default_wallet_path = ""

; The name of an environment variable that contains the password to decrypt
; the wallet file specified above. Using an environment variable is more
; secure than placing the password directly in the .ini file.
quicpro.smartcontract_default_wallet_password_env_var = "QUICPRO_WALLET_PASSWORD"

; Enables integration with a Hardware Security Module (HSM) for signing
; transactions. In this mode, the private key never leaves the secure hardware.
quicpro.smartcontract_use_hardware_wallet = 0

; The path to the PKCS#11 library file required to communicate with the HSM.
quicpro.smartcontract_hsm_pkcs11_library_path = "/usr/lib/x86_64-linux-gnu/softhsm/libsofthsm2.so"


; --- Application & Event Handling ---

; A path to a directory containing the ABI (Application Binary Interface)
; JSON files for the smart contracts the application will interact with.
; The framework can preload these to simplify contract calls from PHP.
quicpro.smartcontract_abi_directory = "/var/www/abis"

; Enables a background worker that listens for specific smart contract events
; on the blockchain and translates them into internal MCP events. This allows
; your PHP applications to react to on-chain events in real-time.
quicpro.smartcontract_event_listener_enable = 0

; --------------------------------------------------------------------------
; XXI. Dynamic Admin API
; --------------------------------------------------------------------------
; Configures the built-in, high-security Admin API for dynamic,
; zero-downtime reconfiguration of a running server instance. This is
; an advanced feature inspired by modern infrastructure like the Caddy web server.



; The IP address the Admin API should bind to. It is critical to bind
; this to a local or internal-only interface (`127.0.0.1` or a private IP)
; to prevent public exposure.
quicpro.admin_api_bind_host = "127.0.0.1"

; The TCP/QUIC port the Admin API will listen on.
quicpro.admin_api_port = 2019

; The authentication mode for the Admin API. "mtls" is the only recommended
; option for production, as it provides strong, certificate-based
; cryptographic authentication for all administrative clients.
quicpro.admin_api_auth_mode = "mtls"

; The path to the CA certificate used to validate admin clients.
quicpro.admin_api_ca_file = ""

; The path to the server certificate for the Admin API endpoint itself.
quicpro.admin_api_cert_file = ""

; The path to the private key for the Admin API endpoint's certificate.
quicpro.admin_api_key_file = ""
