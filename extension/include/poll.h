/*
 * include/poll.h â€“ QUIC Connection Event Polling API for php-quicpro_async
 * =========================================================================
 *
 * This header file declares the function prototype for the QUIC connection
 * polling mechanism provided by the php-quicpro_async extension. The main
 * function, `quicpro_poll`, allows PHP userland to drive the QUIC state machine
 * for a specific connection by processing network events and timeouts.
 *
 * Key responsibilities of the underlying C implementation (poll.c):
 * - Reading incoming UDP packets for a QUIC connection and feeding them to libquiche.
 * - Sending outgoing QUIC packets generated by libquiche.
 * - Managing QUIC connection timers (e.g., for retransmissions, idle detection)
 * and invoking `quiche_conn_on_timeout()`.
 * - Optionally integrating with advanced I/O mechanisms like AF_XDP (if compiled).
 * - Awareness of system NAPI busy-poll budget to act cooperatively.
 * - Integration with PHP Fibers to yield control if busy-polling exceeds budgets,
 * allowing other Fibers to run.
 * - Handling socket-level features like kernel packet timestamping.
 *
 * This header is primarily for declaring the PHP_FUNCTION exposed to userland.
 * Argument information (arginfo) for this function is in php_quicpro_arginfo.h.
 */

#ifndef QUICPRO_POLL_H
#define QUICPRO_POLL_H

#include <php.h> // Required for the PHP_FUNCTION macro

/*
 * PHP_FUNCTION(quicpro_poll);
 * ---------------------------
 * Drives the QUIC event loop for a given MCP connection resource.
 * This function should be called repeatedly by the PHP application to process
 * network I/O (reading incoming packets, sending outgoing packets) and to handle
 * QUIC protocol timeouts for the specified connection.
 *
 * Userland Signature (conceptual, actual in php_quicpro_arginfo.h):
 * bool quicpro_poll(resource $mcp_connection, int $timeout_ms)
 *
 * Parameters (in C, parsed from PHP):
 * - $mcp_connection: A valid MCP connection resource (internally a quicpro_session_t* or similar).
 * - $timeout_ms: A hint for how long this poll call might block or busy-wait if no
 * immediate events are available. The internal implementation will also consider
 * libquiche's recommended timeout. A negative value might indicate blocking
 * indefinitely until an event or libquiche timeout. A value of 0 indicates
 * non-blocking check.
 *
 * Returns:
 * - `true` if polling was successful and the connection is still active or progressing.
 * - `false` if the connection resource is invalid, has been closed, or an
 * unrecoverable error occurred during polling (an exception might also be thrown).
 *
 * This function is essential for applications that manage their own event loop
 * or use Fibers to achieve concurrency with MCP connections. The C-native
 * PipelineOrchestrator uses similar internal polling logic for its MCP calls.
 */
PHP_FUNCTION(quicpro_poll);

#endif /* QUICPRO_POLL_H */