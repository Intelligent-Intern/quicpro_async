<?php
declare(strict_types=1);

namespace QuicPro\Tests\Connection;

use PHPUnit\Framework\TestCase;
use Quicpro\Stream;

/*
 * ─────────────────────────────────────────────────────────────────────────────
 *  FILE: StreamOpenTest.php
 *  SUITE: 002-connection
 *
 *  WHY THIS TEST EXISTS
 *  --------------------
 *  After a client→server handshake we must prove that the **stream-layer**
 *  works.  RFC 9000 §2.1 says:
 *
 *      • Client-initiated *bidirectional* streams use IDs 0, 4, 8, …
 *      • Client-initiated *unidirectional* streams use IDs 2, 6, 10, …
 *
 *  Any deviation indicates a bug in the quiche binding (e.g. wrong
 *  stream type flag) and will break higher-level HTTP/3 mapping.
 *
 *  ENVIRONMENT
 *  -----------
 *  Uses the `demo-quic` endpoint (172.19.0.10:4433).
 * ─────────────────────────────────────────────────────────────────────────────
 */
final class StreamOpenTest extends TestCase
{
    private string $host;
    private int    $port;

    protected function setUp(): void
    {
        $this->host = getenv('QUIC_DEMO_HOST') ?: 'demo-quic';
        $this->port = (int) (getenv('QUIC_DEMO_PORT') ?: 4433);

        if (!function_exists('quicpro_version')) {
            self::markTestSkipped('quicpro_async extension not loaded');
        }
    }

    /*
     *  TEST 1 – First **bidirectional** stream must have ID 0
     *  ------------------------------------------------------
     *  RFC 9000 §2.1: client-bidirectional streams start at 0 and
     *  increment by 4.  Stream handle exposes →getId().
     */
    public function testFirstBidirectionalStreamIdZero(): void
    {
        $sess  = quicpro_connect($this->host, $this->port);
        /** @var Stream $s0 */
        $s0    = quicpro_open_stream($sess, /* bidirectional = */ true);

        $this->assertSame(0, $s0->getId(), 'First bidi stream ID ≠ 0');

        quicpro_close($sess);
    }

    /*
     *  TEST 2 – Second **bidirectional** stream ID is +4
     *  -------------------------------------------------
     *  Ensures the implementation respects the “increment by 4” rule
     *  instead of +1 which would collide with unidirectional IDs.
     */
    public function testSecondBidirectionalStreamIdPlusFour(): void
    {
        $sess = quicpro_connect($this->host, $this->port);
        $s0   = quicpro_open_stream($sess, true);
        $s1   = quicpro_open_stream($sess, true);

        $this->assertSame($s0->getId() + 4, $s1->getId(), 'Bidi stream ID step ≠ 4');

        quicpro_close($sess);
    }

    /*
     *  TEST 3 – First **unidirectional** stream ID is 2
     *  ------------------------------------------------
     *  RFC 9000: client-unidirectional IDs are 2, 6, 10 …
     */
    public function testFirstUnidirectionalStreamIdTwo(): void
    {
        $sess = quicpro_connect($this->host, $this->port);
        /** @var Stream $u0 */
        $u0   = quicpro_open_stream($sess, /* bidirectional = */ false);

        $this->assertSame(2, $u0->getId(), 'First uni stream ID ≠ 2');

        quicpro_close($sess);
    }
}
