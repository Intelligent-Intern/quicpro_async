<?php
declare(strict_types=1);

namespace QuicPro\Tests\Connection;

use PHPUnit\Framework\TestCase;
use Quicpro\Session;

/*
 * ─────────────────────────────────────────────────────────────────────────────
 *  FILE: WebsocketOpenTest.php
 *  SUITE: 002-connection
 *
 *  WHY THIS TEST EXISTS
 *  --------------------
 *  HTTP/3 ↔ WebSocket (RFC 9220 “CONNECT” over QUIC) is a cornerstone
 *  feature of *quicpro_async*: most agent back-ends need long-lived,
 *  duplex channels.  This file proves that the **upgrade dance** works
 *  and that a bidirectional flow of text frames is possible.
 *
 *  SERVER CONTRACT
 *  ---------------
 *  • The existing **demo-quic** container already includes the script
 *      /srv/chat_server.php
 *    which upgrades any request to **chat** into an echo WebSocket.
 *    (It runs in the container’s entry-point before `supervisord`.)
 *
 *  • Endpoint:    172.19.0.10:4433  path /chat   (same cert as /echo)
 *
 *  • @todo JS demo front-end, add a container
 *    @todo `demo-vue` (Node 20-alpine, Vite, Vue 3) that consumes the
 *    @todo WebSocket.  The unit test itself needs only the PHP echo server.
 *
 *  ENVIRONMENT
 *  -----------
 *      QUIC_DEMO_HOST   default demo-quic
 *      QUIC_DEMO_PORT   default 4433
 * ─────────────────────────────────────────────────────────────────────────────
*/
final class WebsocketOpenTest extends TestCase
{
    private string $host;
    private int    $port;

    protected function setUp(): void
    {
        $this->host = getenv('QUIC_DEMO_HOST') ?: 'demo-quic';
        $this->port = (int) (getenv('QUIC_DEMO_PORT') ?: 4433);

        if (!function_exists('quicpro_version')) {
            self::markTestSkipped('quicpro_async extension not loaded');
        }
    }

    /*
     *  TEST 1 – Upgrade succeeds and echoes a message
     *  ---------------------------------------------
     *  EXPECTATION:
     *      • `$sess->upgrade('/chat')` returns a PHP stream
     *      • Writing “hello” then fgets() yields “hello”
     *
     *  RATIONALE:
     *      Verifies CONNECT handshake (RFC 9220 §3), WebSocket
     *      encapsulation in HTTP/3 datagrams, and that our wrapper
     *      exposes the resulting bidirectional flow as a normal PHP
     *      stream resource.
     */
    public function testWebsocketEcho(): void
    {
        $sess = quicpro_connect($this->host, $this->port);
        $ws   = $sess->upgrade('/chat');          // returns resource

        $this->assertIsResource($ws, 'Upgrade failed');
        fwrite($ws, "hello\n");
        $echo = fgets($ws);

        $this->assertSame("hello\n", $echo, 'Echo mismatch');

        fclose($ws);
        $sess->close();
    }

    /*
     *  TEST 2 – Closing client write side keeps read open
     *  --------------------------------------------------
     *  EXPECTATION:
     *      • `shutdown($ws, SHUT_WR)` succeeds
     *      • Server can still push “[DONE]”
     *
     *  RATIONALE:
     *      Ensures half-close semantics survive the ws/h3/QUIC stack
     *      so that chat back-ends can implement “client finished, but
     *      wait for final agent summary”.
     */
    public function testHalfCloseKeepsReadSideAlive(): void
    {
        $sess = quicpro_connect($this->host, $this->port);
        $ws   = $sess->upgrade('/chat');

        fwrite($ws, "bye\n");
        shutdown($ws, \STREAM_SHUT_WR);          // send FIN on write side

        $done = fgets($ws);                      // expect server push
        $this->assertSame("[DONE]\n", $done);

        fclose($ws);
        $sess->close();
    }
}
